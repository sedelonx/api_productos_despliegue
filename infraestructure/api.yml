AWSTemplateFormatVersion: "2010-09-09"
Description: container on ecs cluster

Resources:
  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 1024
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: 'arn:aws:iam::208579899987:role/LabRole'
      ContainerDefinitions:
        - Name: api-productos
          Image: "208579899987.dkr.ecr.us-east-1.amazonaws.com/api-productos:latest"
          Cpu: 512
          Memory: 1024
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "/api/api-productos"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "api"
          DependsOn:
            - ContainerName: mongodb
              Condition: HEALTHY
          Essential: true
          HealthCheck:
            Command: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
            Interval: 30 # Intervalo entre comprobaciones de salud en segundos
            Timeout: 5 # Tiempo máximo en segundos permitido para una comprobación de salud
            Retries: 3 # Número de veces que se realizará la comprobación antes de declarar el contenedor como no saludable
            StartPeriod: 60 # Tiempo en segundos para esperar antes de comenzar las comprobaciones de salud después del inicio del contenedor
          Environment:
            - Name: MONGO_URL
              Value: "mongodb://127.0.0.1:27017/empresa" # Configura la URL de conexión para tu base de datos
            - Name: OAUTH_AUDIENCE
              Value: "https://localhost:3000/api/productos" # Configura la URL de conexión para tu base de datos
            - Name: OAUTH_URL
              Value: "https://dev-utn-frc-iaew.auth0.com/" # Configura la URL de conexión para tu base de datos
        - Name: mongodb
          Image: "mongo:latest" # Asegúrate de utilizar la imagen de MongoDB adecuada
          Cpu: 512
          Memory: 1024
          PortMappings:
            - ContainerPort: 27017 # Puerto de MongoDB
              Protocol: tcp
          Essential: false
          HealthCheck:
            Command: ["CMD-SHELL", "mongosh --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 1)'"]
            Interval: 30 # Intervalo entre comprobaciones de salud en segundos
            Timeout: 5 # Tiempo máximo en segundos permitido para una comprobación de salud
            Retries: 3 # Número de veces que se realizará la comprobación antes de declarar el contenedor como no saludable
            StartPeriod: 60 # Tiempo en segundos para esperar antes de comenzar las comprobaciones de salud después del inicio del contenedor
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "/db/api-productos"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "db"
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      ServiceName: api-productos-service
      TaskDefinition: !Ref Task
      Cluster: !ImportValue "ECSCluster"
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 70
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !ImportValue Subnet1
            - !ImportValue Subnet2
          SecurityGroups:
            - !ImportValue ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: api-productos
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: productos-tg
      VpcId: !ImportValue VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 10
      TargetType: ip

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue Listener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
  TaskLogGroupApi:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /api/api-productos # Nombre del log group, se puede personalizar según tu preferencia
      RetentionInDays: 7 # Cantidad de días que se retendrán los registros en el log group. Puedes ajustar esta cantidad según tus necesidades.
  TaskLogGroupMongoDB:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/db/api-productos" # Nombre del log group, se puede personalizar según tu preferencia
      RetentionInDays: 7 # Cantidad de días que se retendrán los registros en el log group. Puedes ajustar esta cantidad según tus necesidades.

Outputs:
  ApiEndpoint:
    Description: Productos API Endpoint
    Value: !Join ["", ["http://", !ImportValue DomainName]]
    Export:
      Name: "ProductosApiEndpoint"